#!/usr/bin/env php
<?php
error_reporting(E_ALL);
ini_set('display_errors', 'on');
ini_set('limit_memory','512M');
ini_set('opcache.enable', false);
date_default_timezone_set('Asia/Shanghai');

if(empty($argv[1]))
{
    echo "Usage: workermand {start|stop|restart|reload|kill|status|systemd}\n";
    exit;
}

$cmd = $argv[1];

define('WORKERMAN_ROOT_DIR', realpath(__DIR__."/../")."/");

chdir(WORKERMAN_ROOT_DIR.'/conf');

if(0 === strpos(strtolower(PHP_OS), 'win'))
{
    exit("Workerman can not run on Windows operating system\n");
}

if (version_compare(PHP_VERSION,'5.3.0','<'))
{
    exit("Workerman PHP >= 5.3.0 required \n");
}

require_once WORKERMAN_ROOT_DIR . 'Core/Master.php';

// ==pid-file==
Man\Core\Lib\Config::instance();
if(!($pid_file = Man\Core\Lib\Config::get('workerman.pid_file')))
{
    $pid_file = './bin/pid';
}
define('WORKERMAN_PID_FILE', $pid_file);

// ==log-dir==
$log_dir = Man\Core\Lib\Config::get('workerman.log_dir');
define('WORKERMAN_LOG_DIR', $log_dir . '/');

// ==ipc-key==
if(!($ipc_key = Man\Core\Lib\Config::get('workerman.ipc_key')))
{
    $ipc_key = fileinode(WORKERMAN_ROOT_DIR);
}
define('IPC_KEY', $ipc_key);

// ==shm-size==
if(!($shm_size = Man\Core\Lib\Config::get('workerman.shm_size')))
{
    $shm_size = 393216;
}
define('DEFAULT_SHM_SIZE', $shm_size);

// ==msg-qbytes==
if(!($msg_qbytes = Man\Core\Lib\Config::get('workerman.msg_qbytes')))
{
    $msg_qbytes = 65535;
}
define('DEFAULT_MSG_QBYTES', $msg_qbytes);

//检查pid对应的进程是否存在，不存在删除PID文件
if(!in_array($cmd, array('status', 'systemd')) && is_file(WORKERMAN_PID_FILE))
{
    //检查权限
    if(!posix_access(WORKERMAN_PID_FILE, POSIX_W_OK))
    {
        if($stat = stat(WORKERMAN_PID_FILE))
        {
            if(($start_pwuid = posix_getpwuid($stat['uid'])) && ($current_pwuid = posix_getpwuid(posix_getuid())))
            {
                exit("\n\033[31;40mWorkerman is started by user {$start_pwuid['name']}, {$current_pwuid['name']} can not $cmd Workerman, Permission denied\033[0m\n\n\033[31;40mWorkerman $cmd failed\033[0m\n\n");
            }
        }
        exit("\033[31;40mCan not $cmd Workerman, Permission denied\033[0m\n");
    }
    //检查pid进程是否存在
    if($pid = @file_get_contents(WORKERMAN_PID_FILE))
    {
        if(false === posix_kill($pid, 0))
        {
            if(!unlink(WORKERMAN_PID_FILE))
            {
                exit("\033[31;40mCan not $cmd Workerman\033[0m\n\n");
            }
        }
    }
}

switch($cmd)
{
    case 'start':
        remove_monitor_sock_file();
        Man\Core\Master::run();
        break;
    case 'stop':
        $pid = @file_get_contents(WORKERMAN_PID_FILE);
        if(empty($pid))
        {
            exit("\033[33;40mWorkerman not running?\033[0m\n");
        }
        stop_and_wait();
        break;
    case 'restart':
        stop_and_wait();
        remove_monitor_sock_file();
        Man\Core\Master::run();
        break;
    case 'reload':
        $pid = @file_get_contents(WORKERMAN_PID_FILE);
        if(empty($pid))
        {
            exit("\033[33;40mWorkerman not running?\033[0m\n");
        }
        posix_kill($pid, SIGHUP);
        echo "reload Workerman\n";
        break;
    case 'kill':
        force_kill();
        force_kill();
        break;
    case 'status':
        $address = Man\Core\Lib\Config::get('Monitor.listen');
        $sock = @stream_socket_client($address, $err_no, $err_msg);
        if(!$sock)
        {
            exit("\n\033[31;40mcan not connect to $address : $err_msg \033[0m\n\n\033[31;40mWorkerman not running\033[0m\n\n");
        }
        fwrite($sock, 'status');
        $read_fds = array($sock);
        $write_fds = $except_fds = array();
        while($ret = stream_select($read_fds, $write_fds, $except_fds, 1))
        {
            if(!$ret)break;
            foreach($read_fds as $fd)
            {
                if($ret_str = fread($fd, 8192))
                {
                    echo $ret_str;
                }
                else
                {
                    exit;
                }
            }
        }
        break;
        case 'systemd':  // 安装 systemd 服务，用于系统启动或重启时自动启动 workerman
            // 使用说明： workermand systemd [service_name]
            // "[service_name]" 可选，指服务名，例如： 
            // workermand systemd my_socket_server
            // 未指定时，以项目代码的目录名作为服务名

            // 检查系统是否支持 systemd
            $systemctl = exec('which systemctl', $output, $status);
            if ($status !== 0)  // 非0值代表出错
            {
                exit("\033[31;40mThis operating system does not support systemd!\033[0m\n");
            }

            // 检查是否为 root 用户
            $username = exec('whoami');
            if ($username !== 'root')  // sudo 方式运行时，获取到的也是 root
            {
                exit("\033[31;40mPlease run as root user!\033[0m\n");
            }

            // 检查安装目录是否存在
            $install_dir = '/usr/lib/systemd/system';
            if (!is_dir($install_dir))
            {
                exit("\033[31;40mSystemd direcotry $install_dir does not exist!\033[0m\n");
            }

            // 确定服务名
            if (isset($_SERVER['argv'][2]))  // 执行时有提供 service_name 参数
            {
                $service_name = $_SERVER['argv'][2];
            }
            else  // 采用项目代码的目录名作为服务名
            {
                $service_name = basename(dirname(dirname(__DIR__)));
            }

            // 检查服务名是否合法
            if (preg_match('/^[\w-]+$/', $service_name) !== 1)
            {
                exit("\033[31;40mInvalid service name $service_name!\033[0m\n");
            }

            // 避免覆盖已经存在的 service 文件
            $install_path = "$install_dir/$service_name.service";
            if (is_file($install_path))
            {
                exit("\033[31;40mSystemd service $service_name already exists!\033[0m\n");
            }

            $project_dir = realpath(dirname(dirname(__DIR__)));
            $service_description = str_replace('_', ' ', $service_name);

            // service 文件内容
            $service_content = <<<EOCONTENT
[Unit]
Description=$service_description
After=network.target

[Service]
Type=forking
PIDFile=$project_dir/workerman/conf/bin/pid
ExecStart=$project_dir/workerman/bin/workermand start
ExecReload=$project_dir/workerman/bin/workermand reload
ExecStop=$project_dir/workerman/bin/workermand stop
LimitNOFILE=102400
LimitNPROC=102400
PrivateTmp=false

[Install]
WantedBy=multi-user.target
EOCONTENT;

            // 保存 service 文件
            $install_result = file_put_contents($install_path, $service_content);
            if ($install_result === false)
            {
                exit("\033[31;40mInstalling systemd service $service_name failed!\033[0m\n");
            }
            else
            {
                echo "\033[32;40mInstalling systemd service $service_name succeeded.\033[0m\n\n";
                echo "    Enable service:\tsystemctl enable $service_name\n";
                echo "    Start service:\tsystemctl start $service_name\n";
                echo "\n";
                exit;
            }

            break;
    default:
        echo "Usage: workermand {start|stop|restart|reload|kill|status|systemd}\n";
        exit;
        
}

function force_kill()
{
    remove_monitor_sock_file();
    $ret = $match = array();
    exec("ps aux | grep -E '".Man\Core\Master::NAME.":|workermand' | grep -v grep", $ret);
    $this_pid = posix_getpid();
    $this_ppid = posix_getppid();
    foreach($ret as $line)
    {
        if(preg_match("/^[\S]+\s+(\d+)\s+/", $line, $match))
        {
            $tmp_pid = $match[1];
            if($this_pid != $tmp_pid && $this_ppid != $tmp_pid)
            {
                posix_kill($tmp_pid, SIGKILL);
            }
        }
    }
}

function stop_and_wait($wait_time = 6)
{
    remove_monitor_sock_file();
    $pid = @file_get_contents(WORKERMAN_PID_FILE);
    if(empty($pid))
    {
        //exit("server not running?\n");
    }
    else
    {
        $start_time = time();
        posix_kill($pid, SIGINT);
        while(is_file(WORKERMAN_PID_FILE))
        {
            clearstatcache();
            usleep(1000);
            if(time()-$start_time >= $wait_time)
            {
                force_kill();
                force_kill();
                unlink(WORKERMAN_PID_FILE);
                usleep(500000);
                break;
            }
        }
        echo "Workerman stoped\n";
    }
}

function remove_monitor_sock_file()
{
    $monitor_listen = \Man\Core\Lib\Config::get('Monitor.listen');
    if(strpos($monitor_listen, 'unix') === 0)
    {
        $sock_file =  str_replace('unix://', '', $monitor_listen);
        if(is_writeable($sock_file))
        {
            unlink($sock_file);
        }
    }
}
